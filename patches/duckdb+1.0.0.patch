diff -ru packages/vendor/duckdb/Cargo.toml packages/vendor/duckdb/Cargo.toml
--- a/Cargo.toml	1969-12-31 18:00:01
+++ b/Cargo.toml	2024-09-04 22:01:14
@@ -170,18 +170,10 @@

 [features]
 appender-arrow = ["vtab-arrow"]
-buildtime_bindgen = ["libduckdb-sys/buildtime_bindgen"]
-bundled = ["libduckdb-sys/bundled"]
 default = []
 extensions-full = [
-    "json",
-    "parquet",
     "vtab-full",
 ]
-json = [
-    "libduckdb-sys/json",
-    "bundled",
-]
 modern-full = [
     "chrono",
     "serde_json",
@@ -190,10 +182,6 @@
     "uuid",
     "polars",
 ]
-parquet = [
-    "libduckdb-sys/parquet",
-    "bundled",
-]
 polars = ["dep:polars"]
 vtab = []
 vtab-arrow = [
@@ -212,4 +200,7 @@
 vtab-loadable = [
     "vtab",
     "duckdb-loadable-macros",
-]
+]
+loadable_extension = [
+    "libduckdb-sys/loadable_extension"
+]
\ No newline at end of file
diff -ruN packages/vendor/duckdb/src/vtab/mod.rs packages/vendor/duckdb/src/vtab/mod.rs
--- a/src/vtab/mod.rs	2006-07-23 20:21:28
+++ b/src/vtab/mod.rs	2024-09-05 12:58:13
@@ -148,6 +148,19 @@
     }
 }
 
+unsafe extern "C" fn local_init<T>(info: duckdb_init_info)
+where
+    T: VTabLocalData,
+{
+    let info = InitInfo::from(info);
+    let data = malloc_data_c::<T::LocalInitData>();
+    let result = T::local_init(&info, data);
+    info.set_init_data(data.cast(), Some(drop_data_c::<T::LocalInitData>));
+    if result.is_err() {
+        info.set_error(&result.err().unwrap().to_string());
+    }
+}
+
 unsafe extern "C" fn bind<T>(info: duckdb_bind_info)
 where
     T: VTab,
@@ -162,26 +175,21 @@
 }
 
 impl Connection {
-    /// Register the given TableFunction with the current db
-    #[inline]
     pub fn register_table_function<T: VTab>(&self, name: &str) -> Result<()> {
-        let table_function = TableFunction::default();
-        table_function
-            .set_name(name)
-            .supports_pushdown(T::supports_pushdown())
-            .set_bind(Some(bind::<T>))
-            .set_init(Some(init::<T>))
-            .set_function(Some(func::<T>));
-        for ty in T::parameters().unwrap_or_default() {
-            table_function.add_parameter(&ty);
-        }
-        for (name, ty) in T::named_parameters().unwrap_or_default() {
-            table_function.add_named_parameter(&name, &ty);
-        }
+        let table_function = into_table_function::<T>();
+        table_function.set_name(name);
         self.db.borrow_mut().register_table_function(table_function)
     }
+
+    #[inline]
+    pub fn register_table_function_local_init<T: VTabLocalData>(&self, name: &str) -> Result<()> {
+        let table_function = into_table_function_local_init::<T>();
+        table_function.set_name(name);
+        self.db.borrow_mut().register_table_function(table_function)
+    }
 }
 
+
 impl InnerConnection {
     /// Register the given TableFunction with the current db
     pub fn register_table_function(&mut self, table_function: TableFunction) -> Result<()> {
@@ -193,6 +201,35 @@
         }
         Ok(())
     }
+}
+
+fn into_table_function<T: VTab>() -> TableFunction {
+    let table_function = TableFunction::default();
+    table_function
+        .supports_pushdown(T::supports_pushdown())
+        .set_bind(Some(bind::<T>))
+        .set_init(Some(init::<T>))
+        .set_function(Some(func::<T>));
+    for ty in T::parameters().unwrap_or_default() {
+        table_function.add_parameter(&ty);
+    }
+    for (name, ty) in T::named_parameters().unwrap_or_default() {
+        table_function.add_named_parameter(&name, &ty);
+    }
+
+    table_function
+}
+
+pub trait VTabLocalData: VTab {
+    type LocalInitData: Sized + Free;
+
+    fn local_init(init: &InitInfo, data: *mut Self::LocalInitData) -> Result<(), Box<dyn std::error::Error>>;
+}
+
+fn into_table_function_local_init<T: VTabLocalData>() -> TableFunction {
+    let table_function = into_table_function::<T>();
+    table_function.set_local_init(Some(local_init::<T>));
+    table_function
 }
 
 #[cfg(test)]
