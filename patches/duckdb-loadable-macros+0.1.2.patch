diff -ruN packages/backup/duckdb-loadable-macros/Cargo.toml packages/vendor/duckdb-loadable-macros/Cargo.toml
--- a/Cargo.toml	1969-12-31 18:00:01
+++ b/Cargo.toml	2024-09-05 00:42:50
@@ -46,3 +46,6 @@
     "fold",
     "parsing",
 ]
+
+[dependencies.darling]
+version = "0.20.10"
diff -ruN packages/backup/duckdb-loadable-macros/src/lib.rs packages/vendor/duckdb-loadable-macros/src/lib.rs
--- a/src/lib.rs	2006-07-23 20:21:28
+++ b/src/lib.rs	2024-09-05 02:30:06
@@ -1,25 +1,100 @@
 #![allow(clippy::redundant_clone)]
-use proc_macro2::{Ident, Span};
+use proc_macro2::{Ident, Literal, Punct, Span};
 
 use syn::{parse_macro_input, spanned::Spanned, Item};
 
 use proc_macro::TokenStream;
 use quote::quote_spanned;
+use std::ffi::{CStr, CString};
 
+use darling::{ast::NestedMeta, Error, FromMeta};
+use syn::ItemFn;
+
+/// For parsing the arguments to the duckdb_entrypoint_c_api macro
+#[derive(Debug, FromMeta)]
+struct CEntryPointMacroArgs {
+    #[darling(default)]
+    ext_name: String,
+    min_duckdb_version: Option<String>,
+}
+
 /// Wraps an entrypoint function to expose an unsafe extern "C" function of the same name.
 #[proc_macro_attribute]
+pub fn duckdb_entrypoint_c_api(attr: TokenStream, item: TokenStream) -> TokenStream {
+    let attr_args = match NestedMeta::parse_meta_list(attr.into()) {
+        Ok(v) => v,
+        Err(e) => {
+            return TokenStream::from(Error::from(e).write_errors());
+        }
+    };
+
+    let args = match CEntryPointMacroArgs::from_list(&attr_args) {
+        Ok(v) => v,
+        Err(e) => {
+            return TokenStream::from(e.write_errors());
+        }
+    };
+
+    let minimum_duckdb_version = match args.min_duckdb_version {
+        Some(i) => CString::new(i).unwrap(),
+        None => CString::from(c"dev"),
+    };
+
+    let minimum_duckdb_version_literal = Literal::c_string(minimum_duckdb_version.as_c_str());
+
+    let ast = parse_macro_input!(item as syn::Item);
+
+    match ast {
+        Item::Fn(mut func) => {
+            let c_entrypoint = Ident::new(
+                format!("{}_init_c_api", args.ext_name).as_str(),
+                Span::call_site(),
+            );
+            let original_funcname = func.sig.ident.to_string();
+            let prefixed_original_function = func.sig.ident.clone();
+
+            quote_spanned! {func.span()=>
+
+                /// # Safety
+                ///
+                /// Will be called by duckdb
+                #[no_mangle]
+                pub unsafe extern "C" fn #c_entrypoint(info: ffi::duckdb_extension_info, access: *const ffi::duckdb_extension_access) {
+                    ffi::duckdb_rs_extension_api_init(info, *access, #minimum_duckdb_version_literal).expect("Failed to initialize DuckDB C Extension API");
+
+                    let db : ffi::duckdb_database = *(*access).get_database.unwrap()(info);
+                    let connection = Connection::open_from_raw(db.cast()).expect("can't open db connection");
+                    #prefixed_original_function(connection).expect("init failed");
+                }
+
+                #func
+            }
+            .into()
+        }
+        _ => panic!("Only function items are allowed on duckdb_entrypoint"),
+    }
+}
+
+/// Wraps an entrypoint function to expose an unsafe extern "C" function of the same name.
+#[proc_macro_attribute]
 pub fn duckdb_entrypoint(_attr: TokenStream, item: TokenStream) -> TokenStream {
     let ast = parse_macro_input!(item as syn::Item);
     match ast {
         Item::Fn(mut func) => {
             let c_entrypoint = func.sig.ident.clone();
             let c_entrypoint_version = Ident::new(
-                c_entrypoint.to_string().replace("_init", "_version").as_str(),
+                c_entrypoint
+                    .to_string()
+                    .replace("_init", "_version")
+                    .as_str(),
                 Span::call_site(),
             );
 
             let original_funcname = func.sig.ident.to_string();
-            func.sig.ident = Ident::new(format!("_{}", original_funcname).as_str(), func.sig.ident.span());
+            func.sig.ident = Ident::new(
+                format!("_{}", original_funcname).as_str(),
+                func.sig.ident.span(),
+            );
 
             let prefixed_original_function = func.sig.ident.clone();
 
